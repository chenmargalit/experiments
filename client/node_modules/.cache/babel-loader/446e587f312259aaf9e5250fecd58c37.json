{"ast":null,"code":"import _slicedToArray from\"/Users/chenmargalit/Desktop/weightWpa/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Form,Input,Button,InputNumber,Radio}from'antd';import{useDispatch,useSelector}from'react-redux';var GenericForm=function GenericForm(props){var dispatch=useDispatch();// eslint-disable-next-line\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),exercise=_useState2[0],setExercise=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var email=useSelector(function(state){return state.users.email;});var errors=useSelector(function(state){return state.errors.error;});console.log('errors is',errors);useEffect(function(){setError(errors);},[errors]);var onFinish=function onFinish(values){// console.log('values are', values);\nif(email.length>0){values.email=email;// console.log('values should include email', values);\n}dispatch(props.action(values,props.reDirect));};var onFinishFailed=function onFinishFailed(errorInfo){console.log('Failed:',errorInfo);};var showForm=function showForm(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Form,{name:\"basic\",onFinish:onFinish,onFinishFailed:onFinishFailed},props.email&&/*#__PURE__*/React.createElement(Form.Item,{type:\"email\",label:\"email\",name:\"email\",rules:[{required:true,type:'email',message:'please insert a valid email'}]},/*#__PURE__*/React.createElement(Input,null)),props.password&&/*#__PURE__*/React.createElement(Form.Item,{label:\"Password\",name:\"password\",rules:[{required:true,message:'Please input your password!'}]},/*#__PURE__*/React.createElement(Input.Password,null)),props.confirmPassword&&/*#__PURE__*/React.createElement(Form.Item,{name:\"confirm\",label:\"Confirm Password\",dependencies:['password'],hasFeedback:true,rules:[{required:true,message:'Please confirm your password!'},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(rule,value){if(!value||getFieldValue('password')===value){return Promise.resolve();}return Promise.reject('The two passwords that you entered do not match!');}};}]},/*#__PURE__*/React.createElement(Input.Password,null)),props.weight&&/*#__PURE__*/React.createElement(Form.Item,{label:\"Weight\",name:\"weight\",rules:[{required:true,message:'Please input weight in numbers'}]},/*#__PURE__*/React.createElement(InputNumber,null)),props.comment&&/*#__PURE__*/React.createElement(Form.Item,{label:\"Comment\",name:\"comment\"// rules={[{ required: true, message: 'Please input your password!' }]}\n},/*#__PURE__*/React.createElement(Input.TextArea,null)),props.exercise&&/*#__PURE__*/React.createElement(Form.Item,{rules:[{required:true,message:\"We're on to you, say it !\"}],name:\"exercise\",label:\"Did you exercise?\",style:{marginBottom:20},colon:false},/*#__PURE__*/React.createElement(Radio.Group,null,/*#__PURE__*/React.createElement(Radio,{value:true,onChange:function onChange(){return setExercise(true);}},\"Yes\"),/*#__PURE__*/React.createElement(Radio,{value:false,onChange:function onChange(){return setExercise(false);}},\"No\"))),/*#__PURE__*/React.createElement(Form.Item,null,/*#__PURE__*/React.createElement(Button,{type:\"primary\",htmlType:\"submit\",size:\"large\",style:{borderRadius:'10%'}},\"Submit\"))));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",null,errors&&/*#__PURE__*/React.createElement(\"h3\",{style:{color:'#ff4d4f'}},errors),showForm()));};export default GenericForm;","map":{"version":3,"sources":["/Users/chenmargalit/Desktop/weightWpa/client/src/components/GenericForm.js"],"names":["React","useState","useEffect","Form","Input","Button","InputNumber","Radio","useDispatch","useSelector","GenericForm","props","dispatch","exercise","setExercise","error","setError","email","state","users","errors","console","log","onFinish","values","length","action","reDirect","onFinishFailed","errorInfo","showForm","required","type","message","password","confirmPassword","getFieldValue","validator","rule","value","Promise","resolve","reject","weight","comment","marginBottom","borderRadius","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, InputNumber, Radio } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst GenericForm = (props) => {\n  const dispatch = useDispatch();\n  // eslint-disable-next-line\n  const [exercise, setExercise] = useState(false);\n  const [error, setError] = useState('');\n  const email = useSelector((state) => state.users.email);\n  const errors = useSelector((state) => state.errors.error);\n\n  console.log('errors is', errors);\n\n  useEffect(() => {\n    setError(errors);\n  }, [errors]);\n\n  const onFinish = (values) => {\n    // console.log('values are', values);\n    if (email.length > 0) {\n      values.email = email;\n      // console.log('values should include email', values);\n    }\n    dispatch(props.action(values, props.reDirect));\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n  const showForm = () => {\n    return (\n      <div>\n        <Form name='basic' onFinish={onFinish} onFinishFailed={onFinishFailed}>\n          {props.email && (\n            <Form.Item\n              type='email'\n              label='email'\n              name='email'\n              rules={[{ required: true, type: 'email', message: 'please insert a valid email' }]}\n            >\n              <Input />\n            </Form.Item>\n          )}\n\n          {props.password && (\n            <Form.Item\n              label='Password'\n              name='password'\n              rules={[{ required: true, message: 'Please input your password!' }]}\n            >\n              <Input.Password />\n            </Form.Item>\n          )}\n\n          {props.confirmPassword && (\n            <Form.Item\n              name='confirm'\n              label='Confirm Password'\n              dependencies={['password']}\n              hasFeedback\n              rules={[\n                {\n                  required: true,\n                  message: 'Please confirm your password!',\n                },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                      return Promise.resolve();\n                    }\n\n                    return Promise.reject('The two passwords that you entered do not match!');\n                  },\n                }),\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n          )}\n\n          {props.weight && (\n            <Form.Item\n              label='Weight'\n              name='weight'\n              rules={[{ required: true, message: 'Please input weight in numbers' }]}\n            >\n              <InputNumber />\n            </Form.Item>\n          )}\n\n          {props.comment && (\n            <Form.Item\n              label='Comment'\n              name='comment'\n              // rules={[{ required: true, message: 'Please input your password!' }]}\n            >\n              <Input.TextArea />\n            </Form.Item>\n          )}\n\n          {props.exercise && (\n            <Form.Item\n              rules={[{ required: true, message: \"We're on to you, say it !\" }]}\n              name='exercise'\n              label='Did you exercise?'\n              style={{ marginBottom: 20 }}\n              colon={false}\n            >\n              <Radio.Group>\n                <Radio value={true} onChange={() => setExercise(true)}>\n                  Yes\n                </Radio>\n                <Radio value={false} onChange={() => setExercise(false)}>\n                  No\n                </Radio>\n              </Radio.Group>\n            </Form.Item>\n          )}\n\n          <Form.Item>\n            <Button type='primary' htmlType='submit' size='large' style={{ borderRadius: '10%' }}>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <div>\n        {errors && <h3 style={{ color: '#ff4d4f' }}>{errors}</h3>}\n        {showForm()}\n      </div>\n    </div>\n  );\n};\n\nexport default GenericForm;\n"]},"metadata":{},"sourceType":"module"}